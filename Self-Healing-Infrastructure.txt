Objective
Automatically detect downtime of a core service (NGINX) and recover it without manual intervention, demonstrating automated remediation in a cloud-native DevOps environment.

Tools & Technologies Used
Amazon Linux 2023 (on AWS EC2)

Docker & Docker Compose: Containerize NGINX, Prometheus, Alertmanager, and Blackbox Exporter

Prometheus: Monitors service health via Blackbox HTTP probes

Alertmanager: Receives and manages alerts from Prometheus

Ansible: Automates service remediation (restart)

Shell scripting: Polls Alertmanager for active alerts and triggers Ansible playbook

Architecture Implemented
NGINX web server is deployed as a Docker container.

Prometheus scrapes NGINX health using Blackbox Exporter (i.e., basic HTTP probe).

Alertmanager is configured to receive alerts from Prometheus when NGINX fails.

A monitoring script (monitor_alerts.sh) polls Alertmanager for active "NginxDown" alerts.

When an alert is found, the script automatically triggers an Ansible playbook that restarts NGINX (if stopped or failed).

The whole solution is version-controlled in GitHub, and tested end-to-end with actual failure and recovery.

Key Steps Completed
Deployed AWS EC2 with Amazon Linux, installed Docker, Ansible, and Git.

Cloned and organized a GitHub repository with clear folder structure for configs and automation.

Set up Docker Compose to deploy NGINX, Prometheus, Alertmanager, and Blackbox Exporter on the instance.

Configured Prometheus with Blackbox to probe NGINX HTTP health, not /metrics.

Created and validated alert rules to fire when NGINX is unreachable.

Connected Prometheus and Alertmanager so alerts appear and propagate.

Developed and ran a monitoring script to poll Alertmanager and run the Ansible playbook for self-healing.

Wrote the Ansible playbook to restart (or re-create) the NGINX Docker container as soon as alerts trigger.

Tested the full system by stopping NGINX and observing automatic recovery, confirmed by logs, docker ps, and monitoring dashboards.

Result/Outcome
The system detects when NGINX is down in seconds.

An alert fires, is routed to Alertmanager, and triggers an automated response.

Ansible playbook restores NGINX with zero manual effort.

All project components, scripts, and configs are tracked in GitHub for repeatability and team sharing.

You now have a production-grade pattern for self-healing infrastructure â€” ideal for DevOps, SRE, and cloud-native automation learning or demonstrations.

